<Window
    x:Class="YukkoView2.Views.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:behaviors="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:msm="clr-namespace:YukkoView2.Models.SharedMisc"
    xmlns:sb="clr-namespace:Shinta.Behaviors"
    xmlns:v="clr-namespace:YukkoView2.Views"
    xmlns:vm="clr-namespace:YukkoView2.ViewModels"
    xmlns:vmw="clr-namespace:YukkoView2.Views.MiscWindows"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="{Binding Title}" Left="{Binding Left, Mode=TwoWay}" Top="{Binding Top, Mode=TwoWay}" 
    ResizeMode="CanMinimize" Cursor="{Binding Cursor}" SizeToContent="WidthAndHeight" >

    <Window.DataContext>
        <vm:MainWindowViewModel />
    </Window.DataContext>

    <behaviors:Interaction.Behaviors>
        <sb:WindowBindingSupportBehavior IsActive="{Binding IsActive}" MinimizeBox="True" />
    </behaviors:Interaction.Behaviors>

    <behaviors:Interaction.Triggers>
        <!--  When ContentRendered event raised, Initialize method of ViewModel would be called.  -->
        <behaviors:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodName="Initialize" MethodTarget="{Binding}" />
        </behaviors:EventTrigger>

        <!--  Dispose method is called, when Window closing.  -->
        <behaviors:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction />
        </behaviors:EventTrigger>

        <!--  If you make user choose 'OK or Cancel' closing Window, then please use Window Close cancel Behavior.  -->

        <l:InteractionMessageTrigger MessageKey="{x:Static msm:Yv2Constants.MESSAGE_KEY_OPEN_ABOUT_WINDOW}" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction WindowType="{x:Type vmw:AboutWindow}" Mode="Modal" IsOwned="True" InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="{x:Static msm:Yv2Constants.MESSAGE_KEY_OPEN_SELECT_MONITOR_WINDOW}" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction WindowType="{x:Type vmw:SelectMonitorWindow}" Mode="Modal" IsOwned="True" InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="{x:Static msm:Yv2Constants.MESSAGE_KEY_OPEN_YV2_SETTINGS_WINDOW}" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction WindowType="{x:Type vmw:Yv2SettingsWindow}" Mode="Modal" IsOwned="True" InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

        <!-- モードレスウィンドウ -->
        <l:InteractionMessageTrigger MessageKey="{x:Static msm:Yv2Constants.MESSAGE_KEY_OPEN_DISPLAY_WINDOW}" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction WindowType="{x:Type vmw:DisplayWindow}" Mode="Normal" IsOwned="False" InvokeActionOnlyWhenWindowIsActive="False" />
        </l:InteractionMessageTrigger>

    </behaviors:Interaction.Triggers>

    <StackPanel >
        <Label DockPanel.Dock="Top" Content="{Binding Yv2StatusMessage}" Background="{Binding Yv2StatusBackground}" Height="25" Margin="20,5,20,0" VerticalContentAlignment="Center" Padding="5,0" Cursor="{Binding Yv2StatusCursor}" >
            <Label.InputBindings>
                <MouseBinding Gesture="LeftClick" Command="{Binding LabelYv2StatusClickedCommand}" />
            </Label.InputBindings>
        </Label>
        <StackPanel Orientation="Horizontal" Margin="20,10,20,0" >
            <Button ToolTip="開始" Width="100" Height="25" VerticalAlignment="Center" Command="{Binding ButtonPlayClickedCommand}" >
                <materialDesign:PackIcon Kind="Play" Height="18" Width="18" />
            </Button>
            <Button Style="{StaticResource MaterialDesignRaisedLightButton}" ToolTip="停止" Width="100" Height="25" Margin="10,0,0,0" VerticalAlignment="Center" Command="{Binding ButtonStopClickedCommand}" >
                <materialDesign:PackIcon Kind="Stop" Height="18" Width="18" />
            </Button>
            <Button Style="{StaticResource MaterialDesignRaisedLightButton}" ToolTip="ディスプレイ選択" Width="50" Height="25" DockPanel.Dock="Right" VerticalAlignment="Center" Command="{Binding ButtonSelectMonitorClickedCommand}" Margin="50,0,0,0" >
                <materialDesign:PackIcon Kind="MonitorMultiple" Height="18" Width="18" />
            </Button>
            <Button Style="{StaticResource MaterialDesignRaisedLightButton}" ToolTip="環境設定" Width="50" Height="25" Margin="10,0,0,0" DockPanel.Dock="Right" VerticalAlignment="Center" Command="{Binding ButtonYv2SettingsClickedCommand}" >
                <materialDesign:PackIcon Kind="SettingsOutline" Height="18" Width="18" />
            </Button>
            <Button Name="ButtonHelp" Style="{StaticResource MaterialDesignRaisedLightButton}" ToolTip="ヘルプ" Width="50" Height="25" DockPanel.Dock="Right" VerticalAlignment="Center" Margin="10,0,0,0">
                <behaviors:Interaction.Triggers>
                    <behaviors:EventTrigger EventName="Click">
                        <behaviors:ChangePropertyAction TargetObject="{Binding ContextMenu, ElementName=ButtonHelp}" PropertyName="IsOpen" Value="True"/>
                        <behaviors:ChangePropertyAction TargetObject="{Binding ContextMenu, ElementName=ButtonHelp}" PropertyName="PlacementTarget" Value="{Binding ElementName=ButtonHelp, Mode=OneWay}"/>
                    </behaviors:EventTrigger>
                </behaviors:Interaction.Triggers>
                <Button.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="ヘルプ (_H)" Command="{Binding MenuItemHelpClickedCommand}" />
                        <MenuItem Header="よくある質問 (_Q)" Command="{Binding MenuItemFaqClickedCommand}" />
                        <Separator />
                        <MenuItem Header="ファンサイト (_F)" Command="{Binding MenuItemFantiaClickedCommand}" />
                        <Separator />
                        <MenuItem Header="更新プログラムの確認 (_U)" Command="{Binding MenuItemUpdateClickedCommand}" />
                        <MenuItem Header="改訂履歴 (_I)" Command="{Binding MenuItemHistoryClickedCommand}" />
                        <MenuItem Header="バージョン情報 (_A)" Command="{Binding MenuItemAboutClickedCommand}" />
                    </ContextMenu>
                </Button.ContextMenu>
                <materialDesign:PackIcon Kind="HelpCircleOutline" Height="18" Width="18" />
            </Button>
        </StackPanel>
        <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" BorderThickness="1" Height="3" VerticalAlignment="Center" Margin="20,10,20,0"/>
        <DockPanel Margin="20,10,20,20" >
            <Button Style="{StaticResource MaterialDesignRaisedLightButton}" ToolTip="コメント投稿" Width="50" Height="25" Margin="10,0,0,0" DockPanel.Dock="Right" VerticalAlignment="Center" Command="{Binding ButtonCommentClickedCommand}" >
                <materialDesign:PackIcon Kind="CommentProcessingOutline" Height="18" Width="18" />
            </Button>
            <TextBox Name="TextBoxComment" Text="{Binding Comment, UpdateSourceTrigger=PropertyChanged}" ToolTip="投稿したいコメントの内容をここに入力してください。" ToolTipService.ShowDuration="{x:Static msm:Yv2Constants.TOOL_TIP_LONG_DURATION}" materialDesign:HintAssist.Hint="{Binding ElementName=TextBoxComment, Path=ToolTip}" />
        </DockPanel>

    </StackPanel>
</Window>